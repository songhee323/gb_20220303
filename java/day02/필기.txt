1. 변수
 1-1. 문자열 데이터
     - 참조변수
     - 프로그램 코드에서 "문장"을 표현하기 위해 사용되는 데이터 값

 1-2. String
     - 문자열을 표현하기 위한 자료형이다.(첫 글자 대문자 주의)
     - 글자 수에 상관 없이 쌍따옴표("")로 묶인 내용을 할당할 수 있다.
     -숫자값의 경우 쌍따옴표로 묶이게 되면 문자열로 취급되므로, 
	숫자와 문자열을 분명하게 구별하

 1-3. 변수의 사용 방법
     - 변수를




 1-4. 문자열 데이터
  - String 형의 변수를 선언하고, 쌍따옴표로 묶인 값을 대입한다.
  - 빈 문자열이나 공백도 문자열 데이터이다.
  
	String msg = "	안녕하세요. 자바	";
	-> 문장을 표현, 공백 포함

	String blank = "";
	-> 빈 문자열 값 가능

	String age = :25";
	-> 숫자값이 쌍따옴표로 묶였다면 문자열이다.

  - 문자열 데이터의 덧샘
	-> 문자열 + 문자열 : 두 문장을 하나로 합쳐준다.

	String language = "JAVA";   (Shift+home:전체 복사)
	String language = "JA" + "VA";

   - 문자열 +  기본자료형
	-> 기본자료형의 데이터가 문자열로 변환되고, 두 문장이 합쳐진다.

	int age = 20;
	String name = "자바학생";
	String result = name + age; -> "자바학생" + 20 -> 자바학생20

 1-5. 변수 이름 명명 규칙
  - 변수 이름은 영문, 숫자, "_", "$"만 사용 가능하다.
  - 변수 이름의 첫 글자는 숫자로 시작될 수 없다.
  - 대/소 문자를 엄격하게 구별하므로 오타에 주의해야 한다.
  - 자바에서 사용하는 예약어(키워드)를 사용할 수 없다.
  - myName, my_name, my_phone, userlnput, userPassword
  - 클래스의 이름의 명명 규칙도 변수 이름의 규칙과동일하다.
  
 1-6. 값의 할당 방법
  - boolean은 true(참), false(거짓) 중의 한 가지만 갖는다.
  - boolean isKorean = true;
  - boolean isJapanese = false;

  - char는 홀따옴표(')로 감싸진 한 글자만 대입할 수 있다.
  - char first = '곽';

  - long, float, double은 다른 데이터 형과의 구별을 위해 값 뒤에 데이터 형의 첫 글자를 
    접미사로 가질 수 있다. 접미사는 대/소문자를 가리지 않지만 가급적 대문자를 사용하는 것이 좋다.

  - long money = 500000000L;
  - float PL = 3.14F;
  - double lat = 128.32452D;

  - 생성된 변수는 다른 변수에 대입 될 수 있다.
  - int num1 = 100;
  - int num2 = num1;

 1-7. 변수 사용의 제약
  - 반복하여 다른 값이 할당될수 있지만, 선언은 중복 불가
  - int num1 = 100;
    num1 = 200; 
    num1 = 300;
    int num1 = 400; (에러: 이미  선언된 변수이므로 에러)

  - 선언되지 않는 변수는 사용할 수 없다.
  - int num1 = 100;
  - num1 = 200;
  - num1 = 300;
  - int num1 = 400; (에러:선언되지 않은 변수이므로 에러)

  - 값이 대입되지 않은 변수는 다른 변수에 대입하거나 출력할 수 없다.
  - int num1;
    int num2 = num1; (에러:할당되지 낳은 변수를 대입하였으므로 에러)
    System.out.println(num1); (에러: 할당되지않은 변수를 출력하였으므로 에러)

 1-8. 상수
  - 변하지 않는 수 
  - 변수와 마찬가지로 메모리상에 존재하지만, 값이 변경될 수 없는 데이터
  - final 키워드를 사용하여 선언된 변수는 상수로 생성된다.

	final int age = 20;
	final long money = 1200000L;	
	final float PI = 3.14F;

  - 메모리 상에 접근은 가능하지만, 할당한 값을 변경할 수는 없다.(읽기 전용)
  


2. 연산자
 2-1. 연산자란
  - 프로그램에서 연산을 수행하기 위하여 사용되는 특수기호들

 2-2. 연산자의 종류
  - 대입 연산자 (=)
	-> 변수에 숫자나 문자열 등의 자료를 입력하거나 연산 결과를 다른 변수에 할당한다.
  - 사칙 연산자
	-> 더하기(+), 빼기(-), 곱하기(*), 나눗셈의 몫(/),  나머지(%)
  - 단항 연산자
	-> 변수에 대한 연산 결과를 다시 자기 자신에게 적용하는 경우 사용한다.
  - 증감 연산자
	-> 특정 변수에 저장되어 있는 값을 1씩 증가, 감소 시킬 경우 사용한다.
  - 비교 연산자
	-> 두 개의 변수값 간의 관계를 비교하고 참(true), 거짓 (false)의 결과를 반환한다.
  - 논리 연산자
	-> 좌변과 우변을 논리연산하고, 참일때는 true, 거짓일때는 flase값을 반환한다.

 2-3. 사칙연산자
  - 일반적인 젓셈(+), 뺄셈(-), 곱셈(*), 나눗셉(/,%)을 수행한다.
  - 사칙연산자의 결과는 대입 연산자를 통하여 다른 변수에 대입될 수 있다.
  - 정수(byte,short,int,long)와 실수(float,double)의 연산시에는 정수가 실수의 형태로
    자동 변환되어 처리되기 때문에, 결과는 실수가 된다.
  - 나눗셈에 있어서의 주의사항
	-> 10 나누기 3을 할때, 몫 3, 나머지가 1 계산되어지지만, 
	    나눗셈에 대한 두 개의 연산자로 구분된다.

	-> 10 / 3 : 나눗셈의 몫만을 취하여 결과값은 "3"
	-> 10%3 : 나눗셈의 나머지만을 취하여 결과값은 "1"이 된다
	-> 모든 수는 0으로 나눌 수 없다.

  - 연산자 우선순위
	-> 곱셈(*)과 나눗셈(/,%)은 덧셈(+)과 밸셈(-)보다 우선한다.
	-> 여러 연산자를 복합적으로 사용할 경우, 괄호로 묶여 있는 곳이 우선한다. 

	-> 3+ 5 / (10 - 5)
	-> 3 +5 / 5
	-> 3 + 1
	-> 4

 2-4. 단항 연산자
   - 어떤 변수(x)의 값에 대한 계산 결과를 다시 자기 자신에게 대입하고자 하는 경우의 약식 표현이다.

	int x = 100;
	x = x + 5;

	-> 단항연산자

 	int x =100;
	x += 5;

 -  단한 연산자는 모든 사칙 연산자에 표현 가능하다.
	-> +=, -=, *=, /=, %=

 2-5. 증감 연산자
   - 단항 연산자로 표현할 수 있는 식에서 계산 대상 값이 1인 경우,
     덧셈과 뺄셈에 대해서는 다시 하번 축약 할 수 있다.

   - 덧셈의 경우
	x = x + 1;
	x += 1;
	x++;
	++x;

   - 뺄셈의 경우 

	x = x + 1;
	x -= 1;
	x--;
	--x;

   -  "x++"와 "++x"의 차이
	-> 증감연산자는 그 자체가 다른 연산식의 피연산자로 사용될 수 있다.
	이때, 등감연산자의 표시 위치에 따라 결과가 서로 다르게 적용된다.

  - x++
	-> 증감연산자가 뒤에 표시되는 경우,
	현재 x의 값을 먼저 수식에 적용하고, 나중에 x에 대한 1증가 처리를 한다.

	int a = 100;
	int x = 1;
	int y = a + x++;
	
	y : 101 		100+1
	x : 2		1+1(나중에 1증가 처리)

   -++x
	-> 증감연산자가 앞에 표시되는 경우
	먼저 현재 x의 값을 1증가 시킨후, 그 결과를 수식에 젹용한다.

	int a = 100;
	int x = 1;
	int y = a + ++x

	y : 102  		1+1+100
	x :  2		1+1

 2-6. 비교연산자
   - 같다, 다르다, 크다(초과), 크거나 같다(이상), 작다(미만), 작거나 같다(이하)
   비교를 수행하는 연산자

	같다	==
	다르다	!=
	초과	>
	이상	>=
	미만	<
	이하	<=

   - 주어진 식이 참인지 거짓인지만 판별 가능하므로,  연산 결과는 boolean 값으로 생성된다.

	int x = 100;
	int y = 1;
	boolean result = x != y; 
		(true)


















