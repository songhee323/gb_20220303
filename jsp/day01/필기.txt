1. CS 모델
 - Client Server 모델
 - 간단한 구조로 되어 있는 구조로, 대부분 Server에서 데이터를 처리하고,
   클라이언트는 UI를 담당한다.
 - 구조가 간단하여 속도가 좋은 특징이 있으나 확장성은 조금 떨어진다. 

  1-1. 장점
    - 구조가 간단하여 속도가 빠르다.

  1-2. 단점
    - 구조상 확장의 어려움이 있다.
    - client 프로그램을 다운로드 받아 PC에 설치해야하는 배포의 번거로움
    - 버그를 수정하여도 배포하기가 어렵다.


2. Sockect 통신
 - 서버와 클라이언트 양방향 연결이 이루어지는 통신으로, 클라이언트도 서버로
   요청을 보낼수 있고, 서버도 클라이언트로 요청을 보낼 수 있는 통신이다.
 - 클라이언트와 서버 양쪽에서 서로에게 데이터 전달을 하는 방식의 양방향 통신.
 - 보통 스트리밍이나 실시간 채팅 등 실시간으로 데이터를 주고 받아야 하는 경우에는
   Connection을 자주 맺고 끊을수가 없다. 그래서 소켓 통신이 적합하다.
 - 계속 연결을 유지하는 연결지향형 방식이다.


3. Web 환경
 - CS환경이 배포가 어렵다는 단점을 보오나한 모델
 - 브라우저만 있으면 어디서든 쉽게 접근 가능

  3-1. 장점
    - OS와 브라우저의 제품에 상관없이 어디서든 동작가능
    - 수정된 부분을 쉽게 배포 가능함.

  3-2. 단점
    - 성능이 떨어지고, 속도가 느림
    - 화면의 복잡도가 증가하면서 성능이 떨어짐
    - 너무 다양한 기술들이 접목되어 관리하기 어려움


4. HTTP통신
 - HTTP란 HyperText Transfer Protocol의 약자로 HTML파일을 전송하는
   프로토콜이라는 의미를 가진다.
 - 초기에는 HTML파일을 전송하려는 목적으로 만들어졌으나 현재는 JSON, Image
     파일 등 또한 전송한다.
 - HTTP통신은 클라이언트에서 서버로 요청을 보내고 서버가 응답하는 방식으로
  통신이 이루어진다. 응답에는 클라이언트의 요청에 따른  결과를 반환한다.
 -  클라이언트의 요청이 있을 때 서버가 응답하는 방식, 단방향 통신
 - 서버의 응답에는 응답 코드가 같이 전송되며, 사용자의 응답 코드와 메세지
   응답으로부터 오는 바디를 통해 요청 값을 전달 받는다.
 - 초기에는 서버는 응답한 후  클라이언트의 Connection을 곧바로 끊어버렸으나,
   최근에는 성능상의 이유로 Keep Alive 옵션을 통해 일정 기간 동안 클라이언트와
   Connection 을 유지하는 방식으로 통신이 가능해졌다.


5. 정리
 - HTTP통신은 클라이언트의 요청이 있을 때 서버가 응답하는 단방향 통신
 - JSON, image, HTML 파일 등 다양한 파일을 전송 받을 수 있다.
 - 응답을 받은 후 Connection이 끊어지는 것이 기본 동작이지만, 
   keep alive 옵션도 가능
 - 자주 데이터를 주고받는 환경이 아닌 경우 HTTP 통신을 통해 받는 것이 유리하다.
 - 자주 데이터를 주고 받아야 하는 화경에서는 소켓 통신이 유리하다.
 - HTTP 통신은 단방향, 소켓 통신은 양방향 통신


6. 통신 프로토콜
 - 통신 프로토콜 또는 통신 규약은 컴퓨터나 원거리 통신 장비 사이에서 메시지를 
   주고 받는 양삭과 규칙의 체계이다.


7. 프로토콜의 예시
 - HTTP 		: Hyper Text Transfer Protocol
 - HTTPS		: Hyper Text Transfer Protocol Secure
 - FTP		: File Transfer Protocol
 - SFTP		: Secure File Transfer Protocol
 - Telnet		: Terminal NETwork
 - SMTP		: Simple Mail Transfer Protocol
 - SSH		: Secure Shell


8. 정적 웹 페이지(static web pages)
 - 언제 접속해도 같은 응답을 보내줍니다.
 - HTML, CSS, JS 파일 등이 서버에 업로드 되면 개발자가 수정하기 전까지
  매번 같은 파일을 브라우저에 건네줍니다.


9. 동적 웹 페이지(dynamic web pages)
 - 웹 서버가 동적 웹 페이지에 대한 요청을 받은 경우 서버는 추가 적인 처리과정
   이후 클라이언트에게 응답을 보냅니다.
 - 동적 페이지는 방문자와 상호작용하기 때문에 페이지 내용은 그때그때 다릅니다.
 - 댓글, 날씨, 추가 정보 들과 같이 정보 변경이 잦은 곳에 많이 사용된다.


10. 웹 호스팅
 - 웹 호스팅이란 홈페이지를(웹 사이트)를 올려놓을 인터넷상의 공간을 임대해주는 서비스.


11. 도메인
 - 도메인은 이름. 건물을 짓는다고 치면 건물 명예 해당한다.
 - 가고자 하는 위치 : 롯데타워
   실제 위치 : 서울특별시 송파구 잠실6로 올림픽로 300

   찾고자 하는 사이트 주소 : naver.com
   실제 주소 : 125.209.222.142


12. 인터넷 주소 체계
 - 	프로토콜		도메인		프토번호		폴더,파일명
	http://		localhost		8080		jsp/Hello.jsp
			facebook.com	80		news/index.html

 - localhost : 모든 컴퓨터가 "자기 자신"으 가리키는 특수 도메인
 - 포트번호 : 특정 컴퓨터에 통신을 위해서 열려 있는 문
	-> 모든 컴퓨터는 0 ~65535 번까지의 포트번호를 가지고있다.
	->이 포트번호를 통해서 통신이 진행될 수 있으며, 기본적으로 모든 포트번호는
	차단되어 있다.
	(포트를 차단하는 역할을 하는 프로그램이 방화벽이다.)


13. web-was 서버차이
  13-1. WEB서버(Web Server)
    - WEB서버는 정적인 자료를 처리하는 서버이다.

  13-2. WAS서버(Was Server) 
    - WAS서버는 동적인 자료를 처리하는 서버이다.

	-> 클라이언트에서 요청하는 페이지는 크게 정적인 페이지와 동적인 페이지로
	나뉠수가 있는데, WEB서버와 WAS서버가 요청 정보에 맞게 역할을 분해하여 
	처리한다.
	-> Apache Server : WEB 역할을 하는 서버 이름
	-> Tomcat Server : WAS 역할을 하는 서버 이름
	-> Apache Tomcat Server : WEB + WAS 서버라고 칭할 수 있다.


14. 서블릿(Servlet)
  - 클라이언트의 요청을 처리하고, 그 결과를 반환하는 Servlet 클래스의 구현
    규칙을 지킨 자바 웹 프로그래밍 기술
  - 자바를 사용하여 웹을 만들기 위해 필요한 기술



















