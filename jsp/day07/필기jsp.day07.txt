1. MVC 패턴
  - M : Model		- 사용자가 우너하는 데이터나 정보를 제공
			- 애플리케이션의 정보, 데이터를 나타낸다. 이러한 Data 
			  정보들의 가공을 책임지는 역할을 한다.
	
  - V : View	 	- 보여지는 화면
			- input 텍스트, 체크박스 항목 등과 같은 사용자 인터넷 요소를 나타낸다.
			다시 말해 데이터 및 객체의 입력, 그 00을 보여주는 출력을 담당한다.
			데이터를 기반으로 사용자들이 볼 수 있는 화면이다. 

  - C : Controller	 	- 사용자의 요청을 처리하고, 그 요청에 따른 전체 적인 흐름을 제어
			- 데이터와 사용자의 인터페이스 요소들을 있는 다리역할을 한다.



  1-1. MVC1
    - MVC1 패턴의 경우 View와 Controller를 모두 JSP가 담당하는 형태를 가집니다.
    즉, JSP 하나로 유저의 요청을 받고 응답을 처리하므오 구현 난이도는 쉽다.
    - 단순한 프로젝트에는 괜찮겠지만, 내용이 복잡하고 거대해질수록 이 패턴은  힘을 잃는다.
    즉 유지보수에 있어서 문제가 발생한다.
 
  1-2. MVC2
    - MVC2 패턴은 널리 표준으로 사용되는 패턴이다. 요청을 하난의 컨트롤러가 먼저 받습니다.
     즉  MVC1과는 다르게 Controller, View가 분리되어 있다. 그러므로 개발자는 M, V, C 중에서
    수정해야 할 부분이 있다면, 극것만 꺼내어 수정하면 됩니다. 따라서 유지보수에 있어서 
    큰 이점을 가집니다.

  1-3. DTO (Data Transfer Object) / VO (Value Object) / Bean 
    - 양쪽으로 전송되어 오고가는 데이터들을 담은 객체, jsp에서는 Bean 이라고 부른다.
      여러 데이터들을 포장해서 만든 데이터 포장객체
    - 사용자가 입력한 값을 객체 형태로 받을 수 있게 클래스 구성
    - 폼에서 입력된 데이터들은 하나의 DTO 객체로 변환 가능
    - 하나의 데이터베이스 레코드를 젖아하여 레코드와 같은 구조를 가짐
    - 레코드가 50개면 DTO객체도 50개
    - 한 개의 레코드는 빈즈 클래스 객체 하나로 매핑
    - 데이터가 포함된 객체를 한 시스템에서 다른 시스템으로 전달하는 작업을 처리하는 객체

  1-3. DAO (Data A ccess Object)
    - 데이터에 접근, 데이터를 관리하기 위한 객체 데이터들을 관리(CRUD)하는 여러 메소드들이 
      정의되어 있다.
    - Insert, delete,  update, select 등 레코드 처리를 주 목적으로 한다.
    - DTO 객체를 데이터베이스 서버에 저장
    - 데이터베이스 서버로부터 레코드를 select한 후, DTO 객체로 변경해 가져온다.
    - SQL을 직접 실행하는 기능을 가짐
    - JSP에서 데이터베이스 접속 로직을 Beans로 작성하여 DB정보 변경시 수비게 변경사항을
     구현할 수 있음
    - 데이터 접근을 목적으로 하는 객체
    - 커넥션 같은 것을 하나만 두고 여러 사용자가 DAO의 인터페이스를 사용하여 필요한 자료에 
      접근하도록 하는 것
    - DB를 사용해 데이터를 조회하거나 조작하는 기능을 전담하도록 만든 오브젝트


2. DataBase 계정생성
  2-1. 최고관리자로 로그인
    system/1234

  2-2. 계정 생성하기
    create user wjsp identified by wjsp;	// id와 pw를 동일하게 가져감
    grant connect, resource to wjsp;
































